// JUSTIFIES TEXT FILES
// 3/12/2016

#include <iostream> 
#include <string>
#include <ctime>
#include <cstdlib>
#include <fstream>
using std::cin; using std::cout; using std::endl;
using std::string; using std::ifstream; using std::ofstream;

int main() {

	string fileName;
	string input;
	ofstream output;
	output.open("justified.txt");

	cout << "Input the Filename: ";
	getline(cin, fileName);
	ifstream fin(fileName.c_str());

	char insertS = ' '; // USED FOR INSERTING SPACES
	char findS = ' '; // USED FOR FINDING SPACES
	string findPunc = "!?.,";	// USED FOR FINDING PUNCTUATION
	const int max = 80;

	while (getline(fin, input)) {
		//--------------------------------------------------------------------------------
		if ((input.size() < max) && (input.size() > (max/2))) {
			// Punctuation Block
			int position = 0;

			// PUTS AN ADDITIONAL SPACE AFTER A PERIOD
			if (input.size() < max) {
				position = input.find_first_of(findPunc);
				while (position != string::npos) {
					++position;
					input.insert(position, 1, insertS);
					position = input.find_first_of(findPunc, position);
				}
			}
		}
		//End Punctuation Block
	//--------------------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// Space Locations
		int spaceLocations[max];
		while ((input.size() < max) && (input.size() > (max/2))) {
			int localAssign = 0;

			// EMPTY THE ARRAY
			for (int i = 0; i < max; ++i) {
				spaceLocations[i] = -1;
			}

			// CHECK THE LOCATIONS OF THE SPACES FOR ADJACENT PUNCTUATION
			for (int i = 0; i < input.find_last_of(findS); ++i) {
				if (input.substr(i, 1) == " ") {
					int chk = 0;

					// SEARCHES FOR EXCLAMATION MARKS
					for (int tmp = 0; tmp < 3; ++tmp) {
						if ((input.substr(i - tmp, 1) == "!") ||
							(input.substr(i - tmp, 1) == "?") ||
							(input.substr(i - tmp, 1) == ".") ||
							(input.substr(i - tmp, 1) == ","))
							chk = 1;
					}

					// IF NO PUNCTUATION WAS FOUND, SAVE VALUE TO ARRAY
					if (chk == 0) {
						spaceLocations[localAssign] = i;
						++localAssign;
					}
				}
			}

			// COUNTS THE TOTAL NUMBER OF VIABLE SPACES IN ARRAY
			int tmp = 0;
			while (spaceLocations[tmp] > 0) {
				++tmp;
			}

			// SELECTS A POSITION AT RANDOM AND PUTS A SPACE THERE.
			srand(time(nullptr));
			int placement = rand() % tmp;
			input.insert(spaceLocations[placement], 1, insertS);


		}
		// End Space Locations
		//--------------------------------------------------------------------------------
		// OUTPUTS JUSTIFIED TEXT
		output << input << endl;
	}
	output.close(); fin.close();
}
