// JUSTIFIES TEXT
// Kyle Stoots
// 3/11/2016

#include <iostream> 
#include <string>
#include <ctime>
#include <cstdlib>
using std::cin; using std::cout; using std::endl; using std::string;

int main() {
	string input = "Cotrary to popular belief, Lorem Ipsum is not simply random text. It has";
	cout << input << endl;
	//cout << "Input a string\n";
	//getline(cin, input);

	char insertS = ' ';			// USED FOR INSERTING SPACES
	char findS = ' ';			// USED FOR FINDING SPACES
	string findPunc = "!?.,";	// USED FOR FINDING PUNCTUATION
	const int max = 80;

	//--------------------------------------------------------------------------------
	// Punctuation Block
	int position = 0;

	// PUTS AN ADDITIONAL SPACE AFTER A PERIOD
	if (input.size() < max) {
		position = input.find_first_of(findPunc);
		while (position != string::npos) {
			++position;
			input.insert(position, 1, insertS);
			position = input.find_first_of(findPunc, position);
		}
	}
	//End Punctuation Block

	// Space Locations
	int spaceLocations[80];
	while (input.size() < 80) {

		int localAssign = 0;

		// EMPTY THE ARRAY
		for (int i = 0; i < 80; ++i) {
			spaceLocations[i] = -1;
		}

		// CHECK THE LOCATIONS OF THE SPACES FOR ADJACENT PUNCTUATION
		for (int i = 0; i < input.find_last_of(findS); ++i) {
			if (input.substr(i, 1) == " ") {
				int chk = 0;

				// CHECK FOR PUNCTUATION MARKS
				for (int tmp = 0; tmp < findPunc.size(); ++tmp) {
					if (input.substr(i - tmp, 1) == findPunc.substr(tmp, 1))
						chk = 1;
				}

				// IF NO PUNCTUATION WAS FOUND NEARBY, SAVE VALUE TO ARRAY
				if (chk == 0) {
					spaceLocations[localAssign] = i;
					++localAssign;
				}
			}
		}

		// COUNTS THE TOTAL NUMBER OF VIABLE SPACES IN ARRAY
		int tmp = 0;
		while (spaceLocations[tmp] > 0) {
			++tmp;
		}

		// SELECTS A POSITION AT RANDOM AND PUTS A SPACE THERE.
		srand(time(nullptr));
		int placement = rand() % tmp;
		input.insert(spaceLocations[placement], 1, ' ');
	}
	// End Space Locations

	// OUTPUTS JUSTIFIED TEXT
	cout << input;
}
